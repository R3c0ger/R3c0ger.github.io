[{"title":"如何复现本博客？","url":"/2024/12/reproduce-hexo-blog/","content":"\n本博客使用 Hexo + GitHub Pages + hexo-theme-reimu 实现，工作流使用 VS Code + Typora。\n\n万一我哪天又得重新配一遍博客，那就得看这篇文章了。\n\n## 下载模板、安装依赖\n\n从 [reimu-template](https://github.com/D-Sketon/reimu-template) 下载本模板，或使用 `git clone` 命令：\n\n```bash\ngit clone https://github.com/D-Sketon/reimu-template\ncd reimu-template\nnpm install\n```\n\n## 修改 _config.yml 配置\n\n注意，本文只放上所有我修改过的配置，其余按默认配置来。\n\n参考 [Hexo 官方文档](https://hexo.io/zh-cn/docs/configuration)。\n\n### 网站信息\n\n```yaml\n# Site\ntitle: Recogeta's Blog\nsubtitle: 少女祈祷中……\ndescription: Ciallo～(∠・ω< )⌒★\nkeywords:\nauthor: Recogeta\nlanguage: zh-CN # 控制网站语言\ntimezone: Asia/Shanghai\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: https://r3c0ger.github.io/ # 注意要想自动生成 GitHub Pages，这里的用户名中的字母要全部小写\npermalink: :year/:month/:title/ # 静态文件的 URL，例如 https://r3c0ger.github.io/2024/12/markdown-snippets/\n```\n\n效果如下：\n\n![image-20241229183719201](image-20241229183719201.png)\n\n### 文件结构调整\n\n```yaml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n需安装 [hexo-renderer-marked](https://github.com/hexojs/hexo-renderer-marked) 插件。\n\n```\nnpm install hexo-renderer-marked --save\n```\n\n这一部分主要是为了调整文件结构，使得文章的图片可以放在与文章同名的文件夹中，而不是统一放在 `source/images` 文件夹中。当然对我而言这种结构还是不太爽。\n\n![image-20241229185455511](image-20241229185455511.png)\n\n### 部署\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/R3c0ger/r3c0ger.github.io.git\n  branch: gh-pages\n```\n\n部署方法在这里就可以说清楚了：\n\n1. 先创建一个名为 `<username.lowercase>.github.io` 的仓库，\n   其中 `<username.lowercase>` 表示你的 GitHub 用户名（而非\"Name\"）的小写形式。\n2. 然后在 Hexo 的配置文件中进行如上配置，`repo` 字段填写你的仓库地址加上 `.git` 后缀。\n3. 最后运行 `hexo deploy` 即可。\n\n### 添加搜索功能\n\n```yaml\nsearch:\n  path: search.json # 文件名必须为search.json\n  field: post\n  content: true\n```\n\n这里的搜索功能是基于 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 插件实现的：\n\n```\nnpm install hexo-generator-search --save\n```\n\n## 修改 _config.reimu.yml 配置\n\n这个配置文件是主题 reimu 的配置文件，主要是调整主题的样式。\n\n### 侧栏效果\n\n```yaml\nsidebar: left # 将侧栏放在左侧\n\nsocial:\n  github: https://github.com/R3c0ger\n  zhihu: https://www.zhihu.com/people/Phortitudual\n```\n\n![image-20241229190049825](image-20241229190049825.png)\n\n```yaml\n# 侧栏组件\nwidgets:\n  - category\n  - tag\n  - tagcloud\n  - archive\n  - recent_posts\n\n# Widget behavior\nshow_count: true # 显示文章数量\n```\n\n![image-20241229190850875](image-20241229190850875.png)\n\n### 底栏效果\n\n```yaml\nfooter:\n  since: 2024 # 2024-current year\n```\n\n![image-20241229190111052](image-20241229190111052.png)\n\n### 开启与关闭功能\n\n```yaml\n# 数学公式\nmath:\n  enable: true\n  katex:\n    enable: false\n  mathjax:\n    enable: true\n\nmermaid:\n  enable: true\n\n# 站内搜索\ngenerator_search:\n  enable: true\n\n# 鼠标指针特效，我觉得没啥用就关了\nfirework:\n  enable: true\n```\n\n数学公式与 mermaid 的效果参见 [Markdown Snippets](https://r3c0ger.github.io/2024/12/markdown-snippets/)。\n\n站内搜索功能效果如下：\n\n![image-20241229191901695](image-20241229191901695.png)\n\n![image-20241229191925108](image-20241229191925108.png)\n\n### 首页分类卡片\n\n```yaml\n# show categories card on home page\nhome_categories:\n  enable: true\n  content:\n    - categories: snippets\n      cover: covers/reimu/108212938.jpg # 路径相对于 source/_data 文件夹\n```\n\n![image-20241229192217694](image-20241229192217694.png)\n\n### 文章末尾版权信息\n\n哈哈，全开！\n\n```yaml\narticle_copyright:\n  enable: true\n  content:\n    author: true\n    link: true\n    title: true\n    date: true\n    updated: true\n    license: true\n```\n\n![image-20241229192459575](image-20241229192459575.png)\n\n## 修改模板\n\nscaffolds/post.md：\n\n```markdown\n---\ntitle: {{ title }}\ndate: {{ date }}\nmermaid: true # 开启 mermaid 支持\n# sticky: true # 置顶\ncover: covers/ # 封面图片路径，相对于 source/_data 文件夹\nexcerpt: \"\" # 摘要，用于首页显示\ncategories: # 分类，可以有多个或多层级，如 - [\"笔记\", \"前端\"] 表示前端笔记\n  - []\ntags: [] # 标签\n---\n```\n\nscaffolds/page.md：\n\n```markdown\n---\ntitle: {{ title }}\ndate: {{ date }}\nmermaid: true\n# sticky: true\ncover: covers/\nexcerpt: \"\"\ncategories: \n  - []\ntags: []\n---\n```\n\nscaffolds/draft.md：\n\n```markdown\n---\ntitle: {{ title }}\nmermaid: true\n# sticky: true\ncover: covers/\nexcerpt: \"\"\ncategories: \n  - []\ntags: []\n---\n```\n\n## 头像与封面\n\n头像所在路径为：`source\\_data\\avatar\\avatar.webp`。将该图片用另外的 webp 图片替换即可。\n\n文章封面使用每篇文章中开头的 Front-matter 中的 `cover` 字段指定，路径相对于生成出的静态页面根目录。可以设置为 `cover: covers/<cover.png>`（放在博客源码的 `source\\_data\\covers` 中），也可以设置为 `cover: /2024/10/<article>/<cover.png>`（放在博客源码的 `source\\_posts\\<article>` 中）。\n\n在本站当中，每篇文章的封面均存储在对应文件夹下，而非统一放在 `source\\_data\\covers` 文件夹中。\n\n不过，首页分类标签的封面会放在 `source\\_data\\covers` 文件夹中。\n\n## 基本的博客发布流程\n\n1. 写文章：`hexo new post \"<title>\"`\n2. 本地预览：`hexo server`\n3. 生成静态文件：`hexo clean && hexo generate` （或 `hexo g`）\n4. 将博客源代码提交到单独的 blog-hexo 仓库\n5. 创建 GitHub Pages 仓库：`<username.lowercase>.github.io`\n6. 部署到 GitHub Pages：`hexo deploy` （或 `hexo d`）\n\n![image-20241229192459575](image-20241229192459575.png)\n\n[image-20241229192459575](image-20241229192459575.png)\n\n`[image-20241229192459575](image-20241229192459575.png)`\n\n```markdown\n[image-20241229192459575](image-20241229192459575.png)\n![image-20241229192459575](image-20241229192459575.png)\n```\n","tags":["hexo"],"categories":["hexo"]},{"title":"Markdown Snippets","url":"/2024/12/markdown-snippets/","content":"\n## Test - Basic Syntax\n\n<u>Lorem</u> **ipsum** *dolor* ~~sit~~ amet, _consectetur_ ~adipiscing~ elit, `sed` <kbd>do</kbd> eiusmod tempor incididunt ut labore et dolore magna $aliqua$. \n\n```python\nprint(\"Hello World!\")\n```\n\n![cover](cover.jpg)\n\n$$\ne^x=\\lim_{n\\to\\infty} \\left( 1+\\frac{x}{n} \\right)^n\n$$\n\n<!-- more -->\n\n---\n\n- [Recogeta's Blog](https://r3c0ger.github.io/)\n- [Recogeta](https://github.com/R3c0ger)\n- [Hexo](https://hexo.io/)\n\n1. 1\n2. 2\n3. 3\n\n> Hello World!\n> > Hello World!\n> >\n> > > Hello World!\n\n| 1 | 2 | 3 |\n|---|---|---|\n| 4 | 5 | 6 |\n| 7 | 8 | 9 |\n\n## HTML Snippets\n\n<details>\n  <summary>Click to expand</summary>\n  <div style=\"margin:auto;\">\n    <figure class=\"clearfix\" style=\"position: relative;\" > \n      <img src=\"./img/1\" alt=\"左图\" style=\"box-sizing:border-box; float:left; width:48.5%; padding-right:2.5px;\"/>\n      <span style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\">→</span>\n      <img src=\"./img/2\" alt=\"右图\" style=\"box-sizing:border-box; float:right; width:48.5%; padding-left:2.5px;\"/> \n    </figure>\n  </div><style>.clearfix::after {content: \"\";clear: both; display: table;}</style>\n</details>\n\n<code>text</code>\n\n<samp>text</samp>\n\n### Multi-Column Layout\n\n<div style=\"margin:auto;\">\n  <figure class=\"clearfix\" style=\"position: relative;\" > \n    <img src=\"./img/1\" alt=\"左图\" style=\"box-sizing:border-box; float:left; width:48.5%; padding-right:2.5px;\"/>\n    <span style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\">→</span>\n    <img src=\"./img/2\" alt=\"右图\" style=\"box-sizing:border-box; float:right; width:48.5%; padding-left:2.5px;\"/> \n  </figure>\n</div><style>.clearfix::after {content: \"\";clear: both; display: table;}</style>\n\n<div style=\"margin:auto;\">\n  <figure class=\"clearfix\" style=\"position: relative;\" > \n    <div class=\"fig\" alt=\"a\" style=\"box-sizing:border-box; float:left; width:50%; padding-right:2.5px;\">\n      <img src=\"./img/original-image.png\" alt=\"原图\" />\n      <center>FGSM 攻击前的图片</center>\n    </div>\n    <div class=\"fig\" alt=\"a\" style=\"box-sizing:border-box; float:left; width:50%; padding-left:2.5px;\">\n      <img src=\"./img/fgsm-attacked-default.png\" alt=\"攻击样本\" />\n      <center>FGSM 攻击后的图片</center>\n    </div>\n  </figure>\n</div><style>h1 {counter-reset: figa}h2 {counter-reset: figb !important; counter-increment: figa}[alt~=\"a\"] {counter-increment: figb;}[alt~=\"a\"] center::before {content:\"图 \" counter(figa) \"-\" counter(figb) \"　\";font-weight: bold;}.clearfix::after {content: \"\";clear: both; display: table;}</style>\n\n<div style=\"column-count: 2; column-rule: 1px solid; margin-bottom: 0px; word-wrap: break-word; word-break: break-all;\">\n  <ul>\n    <li>Lorem ipsum dolor</li>\n    <li>sit amet, consectetur adipiscing</li>\n    <li>elit, sed do eiusmod tempor</li>\n    <li>incididunt ut labore et dolore magna aliqua.</li>\n    <li>Ut enim ad minim veniam,</li>\n    <li>quis nostrud exercitation</li>\n    <li>ullamco laboris nisi ut aliquip</li>\n    <li>ex ea commodo consequat.</li>\n    <li>Duis aute irure</li>\n  </ul>\n</div>\n\n## Mermaid Flowchart\n\n```mermaid\ngraph LR\n   A-.....-> |text| B\n```\n\n```mermaid\nflowchart LR\n   A-. text .-> B\n```\n\n```mermaid\ngraph LR\nclassDef q fill:#fff,stroke:#000\nA[方形] -->B(圆角)\n    B:::q--> C{条件a}\n    C -->|a=1| D[结果1]\n    C -->|a=2| E[结果2]\n    F[横向流程图]\n```\n\n```mermaid\ngraph TB\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\n\n### Sequence chart\n\n```mermaid\nsequenceDiagram\n    critical [nkn]\n        Service-->DB: connect\n    option Network timeout\n        Service-->Service: Log error\n    option Credentials rejected\n        Service-->Service: Log different error\n    end\n```\n\n```mermaid\nsequenceDiagram\n    Consumer-->API: Book something\n    API-->BookingService: Start booking process\n    break when the booking process fails\n        API-->Consumer: show failure\n    end\n    API-->BillingService: Start billing process\n```\n","tags":["test","markdown","typora","snippets"],"categories":["snippets"]}]